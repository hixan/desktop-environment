#!/usr/bin/env python3

from subprocess import Popen, PIPE
from pathlib import Path
import os

# pidfile and other directories
dir = Path(os.getenv('HOME'))/'.config'/'desktop-environment'
pidfile = dir / 'pids' / 'indicate_focus'
pidfile.parent.mkdir(parents=True, exist_ok=True)

pid_actual = str(os.getpid())

with pidfile.open('w') as f:
    print(pid_actual, file=f, end='')


def check_pid():
    # kills this if there is another instance running
    with pidfile.open('r') as f:
        pid_expected = f.readlines()[0]
    if pid_expected == pid_actual:
        return True


def focus_change_trigger(func):
    with Popen(['xprop', '-spy', '-root', '_NET_ACTIVE_WINDOW'], stdout=PIPE) as window_changer:
        while True:
            
            # make sure this is the latest running instance of this program
            if not check_pid():
                assert 0, 'Process is already running'

            # halts until there is output of the subprocess (a change of focus)
            # active window id
            window_id = window_changer.stdout.readline().decode('utf-8').split(' ')[-1].strip()
            func(window_id)


def indicate_focus(window_id):
    Popen(['i3-msg', '[class="^.*"] border pixel 0; border pixel 2'])
    #y = Popen(['xprop', '-id', window_id],stdout=PIPE).stdout.readlines()
    #y = '\n'.join(map(lambda x: x.decode('utf-8').strip(), y))
    #with open('/dev/pts/0', 'w') as f:
        #print(y, file=f)


focus_change_trigger(indicate_focus)

