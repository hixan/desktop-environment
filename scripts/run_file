#!/usr/bin/env python3
import click
from subprocess import Popen, PIPE
from pathlib import Path
from python_tools import get_active_pid, get_tty, is_python_file, METADIR
import json
import sys


metafile = METADIR / 'run_file_meta.json'
metafile.parent.mkdir(parents=True, exist_ok=True)


@click.command()
@click.option('--file', '-f', is_flag=False, help='File to run. Ignored if used with -s or --set-tty')
@click.option('--get-size', '-S', is_flag=False, help='Get the number of columns (width) of the output terminal')
@click.option('--set-tty', '-s', is_flag=True, help='Set the output TTY to the TTY connected to the active terminal. Does nothing if there is no TTY connected. If this flag is set, --file is ignored.')
@click.option('--pytest', '-t', is_flag=True, help='run a testing suite with pytest')
def main(file: str = None, get_size: str = None, set_tty: bool = False, pytest: bool = False):
    '''this script executes FILE and sends output to a cached TTY.

    If no options are selected, STDIN is routed straight to the cached TTY.'''
    if not (file or set_tty or pytest or get_size):
        send_to_tty()

    if get_size:
        print_size('C' in get_size, 'R' in get_size)

    if set_tty:
        save_tty()
        return
    if pytest:
        run_python_test()
    if file:
        file = Path(file)
        assert file.exists(), f'{file.absolute()} does not exist.'
        if is_python_file(file):
            run_python_file(file)
        else:
            raise NotImplementedError


def print_size(r_col, r_row):
    tty = load_tty()
    rows, columns = Popen(['stty', '-F', tty, 'size'], stdout=PIPE).communicate()[0].decode('utf-8').split()
    rv = []
    if r_col:
        rv.append(columns)
    if r_row:
        rv.append(rows)
    print(*rv)

def save_tty():
    # get_tty returns false if it could not find a tty connected.
    if tty := get_tty(get_active_pid()):
        json.dump({'tty': tty}, metafile.open('w'))
        print('success')
    else:
        raise RuntimeError('no tty could be found')


def load_tty():
    return Path('/dev') / json.load(metafile.open('r'))['tty']


def send_to_tty(clear=False):
    tty = load_tty()
    if clear:
        clear_terminal(tty)
    with open(tty, 'w') as f:
        for line in sys.stdin:
            print(line, file=f, end='')


def run_python_file(file: Path):
    load_tty()
    clear_terminal(tty := load_tty())
    # print output to tty
    with open(tty, 'w') as f:
        # color output
        normal_c = '\u001b[37m'
        highlight_c = '\u001b[33m'

        colorer = Popen(['pygmentize', '-l', 'pytb'], stdout=f, stdin=PIPE)
        process = Popen(['python', file], stderr=colorer.stdin, stdout=f)
        print('\n'*3, file=f)
        print(f'{highlight_c}started process with PID {process.pid}{normal_c}', file=f)
        process.communicate()
        colorer.communicate()
        print(f'{highlight_c}Process with PID {process.pid} finished.{normal_c}', file=f)
        print('\n'*5, file=f)

def run_python_test():
    load_tty()
    clear_terminal(tty := load_tty())
    with open(tty, 'w') as f:
        normal_c = '\u001b[37m'
        highlight_c = '\u001b[33m'

        print('\n'*3, file=f)
        #print(f'{highlight_c}started process with PID {process.pid}{normal_c}', file=f)
        process = Popen(['pytest', '--color=yes'], stderr=f, stdout=f).communicate()
        print('\n'*3, file=f)

def clear_terminal(tty: Path):
    # clear console
    with tty.open('w') as f:
        f.write('\033[2J\033[2H')


if __name__ == '__main__':
    main()
